import telebot
import logging
from telebot import types
import sqlRequests


logging.basicConfig(format=u'%(levelname)-8s [%(asctime)s] %(message)s', level=logging.ERROR, filename=u'log.txt')

token = "426617203:AAHqKOH-62wRF1XSEFR8NS6372nHMWNR0BE"
chat_id = 158041048

bot = telebot.TeleBot(token)
brands = sqlRequests.getBrands()
typesOfgood = sqlRequests.getTypesOfGood()

def setHomeScreen(message):
    markup = types.ReplyKeyboardMarkup()
    markup.row('–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', '–ë—Ä–µ–Ω–¥—ã')
    markup.row('üö´')
    bot.send_message(message.chat.id, "üññ", reply_markup=markup)

def setBrandSettingsScreen(message):
    typesOfGoodByCompany = sqlRequests.getTypesOfGoodByCompany(message.text)
    typesOfGoodByUser = sqlRequests.getTypesOfGoodByUser(message.chat.id, message.text)
    subscribe = list(set(typesOfGoodByCompany).difference(typesOfGoodByUser))
    markup = types.ReplyKeyboardMarkup()
    for i in range(len(subscribe)):
        markup.row("‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ " + typesOfgood[subscribe[i]])
    for i in range(len(typesOfGoodByUser)):
        markup.row("‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç " + typesOfgood[typesOfGoodByUser[i]])
    markup.row("üè†")
    bot.send_message(message.chat.id, "Choose:", reply_markup=markup)

def refreshBrandSettingsScreen(message):
    try:
        currentCompany = sqlRequests.getCurrentCompanyByUser(message.chat.id)
        typesOfGoodByCompany = sqlRequests.getTypesOfGoodByCompany(brands[currentCompany])
        typesOfGoodByUser = sqlRequests.getTypesOfGoodByUser(message.chat.id, brands[currentCompany])
        subscribe = list(set(typesOfGoodByCompany).difference(typesOfGoodByUser))
        markup = types.ReplyKeyboardMarkup()
        for i in range(len(subscribe)):
            markup.row("‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ " + typesOfgood[subscribe[i]])
        for i in range(len(typesOfGoodByUser)):
            markup.row("‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç " + typesOfgood[typesOfGoodByUser[i]])
        markup.row("üè†")
        bot.send_message(message.chat.id, "Choose:", reply_markup=markup)
    except:
        setHomeScreen(message)

def setBrandsScreen(message):
    usersBrands = sqlRequests.getUsersBrands(message.chat.id)
    listBrands = list(brands.keys())
    subscribe = list(set(listBrands).difference(usersBrands))
    markup = types.ReplyKeyboardMarkup()
    for i in range(len(subscribe)):
        markup.row("‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ " + brands[subscribe[i]])
    for i in range(len(usersBrands)):
        markup.row("‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç " + brands[usersBrands[i]])
    markup.row("üè†")
    bot.send_message(message.chat.id, "Choose one brand:", reply_markup=markup)

def setMySubscriptionsScreen(message):
    sqlRequests.resetFlagByUser(message.chat.id)  # —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–µ–Ω–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = sqlRequests.getSubscriptions(message.chat.id)
    markup = types.ReplyKeyboardMarkup()
    for i in range(len(subscriptions)):
        markup.row(subscriptions[i])
    markup.row("üè†")
    bot.send_message(message.chat.id, "Your subscriptions:", reply_markup=markup)

def subscribe(message):
    key = message.text[16:]
    if key in brands.values():
        sqlRequests.addSubscribeBrand(message.chat.id, key)
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ " + key + " –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n "
                                                                 "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\"")
        setBrandsScreen(message)
    elif key in typesOfgood.values():
        sqlRequests.addSubscribeTypeOfGoods(message.chat.id, key)
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ " + key + " –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        refreshBrandSettingsScreen(message)

def unsubscribe(message):
    key = message.text[15:]
    if key in brands.values():
        sqlRequests.delSubscribeBrand(message.chat.id, key)
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ " + key + " –æ—Ç–º–µ–Ω–µ–Ω–∞üíî")
        setBrandsScreen(message)
    elif key in typesOfgood.values():
        sqlRequests.delSubscribeTypeOfGoods(message.chat.id, key)
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ " + key + " –æ—Ç–º–µ–Ω–µ–Ω–∞üíî")
        refreshBrandSettingsScreen(message)

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    setHomeScreen(message)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        setMySubscriptionsScreen(message)
    elif message.text == "–ë—Ä–µ–Ω–¥—ã":
        setBrandsScreen(message)
    elif list(brands.values()).count(message.text) != 0: #–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—é –æ–¥–Ω–æ–≥–æ –∏–∑ –±—Ä–µ–Ω–¥–æ–≤
        sqlRequests.resetFlagByUser(message.chat.id)
        sqlRequests.setFlagByUser(message.chat.id, message.text)
        setBrandSettingsScreen(message)
    elif "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞" in message.text:
        subscribe(message)
    elif "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç" in message.text:
        unsubscribe(message)
    elif message.text == "üè†":
        setHomeScreen(message)
    elif message.text == "üö´":
        markup = types.ReplyKeyboardRemove(selective=False)
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ üòú", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –º–Ω–µ —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å")

@bot.message_handler(commands=['chatID'])
def handle_start_help(message):
    bot.send_message(message.chat.id, message.chat.id)

bot.polling(none_stop=True, interval=0)